apply plugin: 'com.android.library'

def static releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}
def SDK_BASENAME = "PAXMdbSdk"
def SDK_VERSION = "_V1.00.00_"+releaseTime()

android {
    namespace "com.pax.unattended.mdblibrary"
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 28

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    buildTypes {
        release {
            minifyEnabled true // 如果app module 已经开启混淆，那子module不管是否开启混淆（true or false）都会混淆
            buildConfigField "boolean", "LOG_DEBUG", "true"
            consumerProguardFiles 'proguard-rules.pro'
        }
    }

}

dependencies {
//    compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    //RxJava RxAndroid
    api 'io.reactivex.rxjava2:rxjava:2.2.2'
    api 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'com.android.support:support-annotations:25.1.0'
}


def sdkDestinationPath = "build"
def zipFile = file('build/intermediates/packaged-classes/release/classes.jar')

//需要过滤的包名
def excludePackages = []
//需要过滤的类(需要全类名)
def excludeClasses = ["","","",""]

static def getExcludePackageRegex(def packages) {
    packages?.collect {
        it?.replace('.', '\\')?.plus("\\**")
    }
}

static def getExcludeClassRegex(def classes) {
    classes?.collect {
        it?.replace('.', '\\')?.plus(".class")
    }
}

task deleteBuild(type: Delete) {
    delete sdkDestinationPath + SDK_BASENAME + SDK_VERSION + ".jar"
}

task makeJar(type: Jar) {
    from zipTree(zipFile)
//    exclude getExcludeClassRegex(excludeClasses)
    archiveBaseName = SDK_BASENAME + SDK_VERSION
    destinationDirectory = file(sdkDestinationPath)
}

makeJar.dependsOn(deleteBuild, build)
